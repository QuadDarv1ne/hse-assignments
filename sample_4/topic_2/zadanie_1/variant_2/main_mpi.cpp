#include <iostream>
#include <mpi.h>
#include <atomic>

#define F 10  // Количество порций пищи в миске
#define N 5   // Количество птенцов
#define M 3   // Количество пищи, которое мать добавляет в миску

std::atomic<int> food_bowl(0); // Потокобезопасная переменная для миски с едой

void chick(int id) {
    while (true) {
        // Птенец ест, если еда есть в миске
        if (food_bowl.load() > 0) {
            food_bowl.fetch_add(-1); // Птенец съедает порцию пищи
            std::cout << "Chick " << id << " eats food. Bowl: " << food_bowl.load() << "/" << F << std::endl;
        }
        // Птенец спит некоторое время перед следующим приемом пищи
    }
}

void mother() {
    while (true) {
        // Когда еда закончилась (миска пуста)
        if (food_bowl.load() == 0) {
            food_bowl.fetch_add(M); // Мать добавляет еду в миску
            std::cout << "Mother refills the bowl with " << M << " portions of food. Bowl: " << food_bowl.load() << "/" << F << std::endl;
        }
    }
}

int main(int argc, char** argv) {
    MPI_Init(&argc, &argv);

    int rank, size;
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    if (rank == 0) {
        mother();  // Мать всегда в процессе с rank 0
    } else {
        chick(rank);  // Птенцы в других процессах
    }

    MPI_Finalize();
    return 0;
}


/*
    Пояснение:
    1) food_bowl — атомарная переменная, которая отслеживает количество пищи в миске.
    2) Функция chick(int id) — моделирует поведение птенца, который поедает порцию пищи и затем спит некоторое время.
       Птенец повторяет этот процесс, пока есть еда.
    3) Функция mother() — когда еда в миске заканчивается, мать добавляет некоторое количество пищи (значение M) и процесс продолжается.
    4) В основном процессе используется MPI, чтобы распределить работу между несколькими процессами.
       Процесс с rank == 0 выполняет роль матери, а все остальные процессы — это птенцы.
*/

/*
    Выводы:
    В обоих вариантах — с использованием MPI или OpenMP — мы моделируем задачу с птенцами и их матерью.
    Каждый птенец по очереди ест из миски, а когда еда заканчивается, мать добавляет порции пищи.
    Алгоритм «Портфель задач» помогает синхронизировать действия птенцов и матери, чтобы все происходило правильно и без гонок потоков.
*/